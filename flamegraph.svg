<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="11650086"><g><title>Cherry-o.exe`_ZN8Cherry_o7utility21high_low_total_counts17h852d9cdbf131a7c5E (2,949 samples, 0.03%)</title><rect x="0.0002%" y="101" width="0.0253%" height="15" fill="rgb(227,0,7)" fg:x="19" fg:w="2949"/><text x="0.2502%" y="111.50"></text></g><g><title>Cherry-o.exe`invoke_main() (2,985 samples, 0.03%)</title><rect x="0.0001%" y="261" width="0.0256%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="271.50"></text></g><g><title>Cherry-o.exe`main (2,985 samples, 0.03%)</title><rect x="0.0001%" y="245" width="0.0256%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="255.50"></text></g><g><title>Cherry-o.exe`std::rt::lang_start_internal (2,985 samples, 0.03%)</title><rect x="0.0001%" y="229" width="0.0256%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="239.50"></text></g><g><title>Cherry-o.exe`std::panic::catch_unwind (2,985 samples, 0.03%)</title><rect x="0.0001%" y="213" width="0.0256%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="223.50"></text></g><g><title>Cherry-o.exe`std::panicking::try (2,985 samples, 0.03%)</title><rect x="0.0001%" y="197" width="0.0256%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="207.50"></text></g><g><title>Cherry-o.exe`std::panicking::try::do_call (2,985 samples, 0.03%)</title><rect x="0.0001%" y="181" width="0.0256%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="191.50"></text></g><g><title>Cherry-o.exe`std::rt::lang_start_internal::closure$0 (2,985 samples, 0.03%)</title><rect x="0.0001%" y="165" width="0.0256%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="175.50"></text></g><g><title>Cherry-o.exe`_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17hd7e21de2fa149555E.llvm.1586428037896951834 (2,985 samples, 0.03%)</title><rect x="0.0001%" y="149" width="0.0256%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="159.50"></text></g><g><title>Cherry-o.exe`_ZN3std3sys9backtrace28__rust_begin_short_backtrace17h78408558484ff5dfE (2,985 samples, 0.03%)</title><rect x="0.0001%" y="133" width="0.0256%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="143.50"></text></g><g><title>Cherry-o.exe`Unknown (2,985 samples, 0.03%)</title><rect x="0.0001%" y="117" width="0.0256%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="2985"/><text x="0.2501%" y="127.50"></text></g><g><title>Cherry-o.exe`__scrt_common_main_seh() (2,989 samples, 0.03%)</title><rect x="0.0001%" y="277" width="0.0257%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="2989"/><text x="0.2501%" y="287.50"></text></g><g><title>Cherry-o.exe`Unknown (755,747 samples, 6.49%)</title><rect x="50.8143%" y="133" width="6.4871%" height="15" fill="rgb(216,20,37)" fg:x="5919914" fg:w="755747"/><text x="51.0643%" y="143.50">Cherry-o..</text></g><g><title>Cherry-o.exe`_RNvCs9cvk0COshk9_7___rustc12___rust_alloc (7,011 samples, 0.06%)</title><rect x="57.3014%" y="133" width="0.0602%" height="15" fill="rgb(206,188,39)" fg:x="6675661" fg:w="7011"/><text x="57.5514%" y="143.50"></text></g><g><title>Cherry-o.exe`_RNvCs9cvk0COshk9_7___rustc14___rust_dealloc (8,770 samples, 0.08%)</title><rect x="57.3616%" y="133" width="0.0753%" height="15" fill="rgb(217,207,13)" fg:x="6682672" fg:w="8770"/><text x="57.6116%" y="143.50"></text></g><g><title>Cherry-o.exe`_ZN11rand_chacha4guts11refill_wide17h027094cb12070ec9E (38,280 samples, 0.33%)</title><rect x="57.4368%" y="133" width="0.3286%" height="15" fill="rgb(231,73,38)" fg:x="6691442" fg:w="38280"/><text x="57.6868%" y="143.50"></text></g><g><title>Cherry-o.exe`_ZN4core4hash11BuildHasher8hash_one17h4aa6853e290ac4cdE (411,729 samples, 3.53%)</title><rect x="57.7654%" y="133" width="3.5341%" height="15" fill="rgb(225,20,46)" fg:x="6729722" fg:w="411729"/><text x="58.0154%" y="143.50">Che..</text></g><g><title>Cherry-o.exe`_ZN71_$LT$std..hash..random..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17hb1ef85e5d76d96aaE.llvm.13714178557824273166 (144,271 samples, 1.24%)</title><rect x="60.0612%" y="117" width="1.2384%" height="15" fill="rgb(210,31,41)" fg:x="6997180" fg:w="144271"/><text x="60.3112%" y="127.50"></text></g><g><title>`0x7FFFF7A0A6F1 (2,766 samples, 0.02%)</title><rect x="61.3438%" y="37" width="0.0237%" height="15" fill="rgb(221,200,47)" fg:x="7146605" fg:w="2766"/><text x="61.5938%" y="47.50"></text></g><g><title>`0x7FFFF7A0A77C (2,325 samples, 0.02%)</title><rect x="61.3712%" y="37" width="0.0200%" height="15" fill="rgb(226,26,5)" fg:x="7149802" fg:w="2325"/><text x="61.6212%" y="47.50"></text></g><g><title>`0x7FFFF7A0A27F (7,312 samples, 0.06%)</title><rect x="61.3349%" y="53" width="0.0628%" height="15" fill="rgb(249,33,26)" fg:x="7145570" fg:w="7312"/><text x="61.5849%" y="63.50"></text></g><g><title>`0x7FFFF68113CA (8,914 samples, 0.08%)</title><rect x="61.3220%" y="69" width="0.0765%" height="15" fill="rgb(235,183,28)" fg:x="7144067" fg:w="8914"/><text x="61.5720%" y="79.50"></text></g><g><title>`0x7FFFF6811469 (9,062 samples, 0.08%)</title><rect x="61.3210%" y="85" width="0.0778%" height="15" fill="rgb(221,5,38)" fg:x="7143946" fg:w="9062"/><text x="61.5710%" y="95.50"></text></g><g><title>`0x7FFFF9DC302B (1,409 samples, 0.01%)</title><rect x="61.4108%" y="53" width="0.0121%" height="15" fill="rgb(247,18,42)" fg:x="7154414" fg:w="1409"/><text x="61.6608%" y="63.50"></text></g><g><title>`0x7FFFF68115B5 (2,191 samples, 0.02%)</title><rect x="61.4062%" y="69" width="0.0188%" height="15" fill="rgb(241,131,45)" fg:x="7153871" fg:w="2191"/><text x="61.6562%" y="79.50"></text></g><g><title>`0x7FFFF68114AC (2,318 samples, 0.02%)</title><rect x="61.4052%" y="85" width="0.0199%" height="15" fill="rgb(249,31,29)" fg:x="7153762" fg:w="2318"/><text x="61.6552%" y="95.50"></text></g><g><title>Cherry-o.exe`_ZN4rand4rngs7adapter9reseeding29ReseedingCore$LT$R$C$Rsdr$GT$19reseed_and_generate17h559db25de7705837E (14,638 samples, 0.13%)</title><rect x="61.2996%" y="133" width="0.1256%" height="15" fill="rgb(225,111,53)" fg:x="7141451" fg:w="14638"/><text x="61.5496%" y="143.50"></text></g><g><title>Cherry-o.exe`_ZN59_$LT$rand_core..os..OsRng$u20$as$u20$rand_core..RngCore$GT$14try_fill_bytes17h2f4e1c12345ced5bE (13,562 samples, 0.12%)</title><rect x="61.3088%" y="117" width="0.1164%" height="15" fill="rgb(238,160,17)" fg:x="7142527" fg:w="13562"/><text x="61.5588%" y="127.50"></text></g><g><title>Cherry-o.exe`_ZN9getrandom3imp15getrandom_inner17hf19490cae17e358dE (13,413 samples, 0.12%)</title><rect x="61.3101%" y="101" width="0.1151%" height="15" fill="rgb(214,148,48)" fg:x="7142676" fg:w="13413"/><text x="61.5601%" y="111.50"></text></g><g><title>Cherry-o.exe`_RNvCs9cvk0COshk9_7___rustc12___rust_alloc (2,187 samples, 0.02%)</title><rect x="62.0161%" y="101" width="0.0188%" height="15" fill="rgb(232,36,49)" fg:x="7224930" fg:w="2187"/><text x="62.2661%" y="111.50"></text></g><g><title>Cherry-o.exe`std::alloc::__default_lib_allocator::__rdl_alloc (13,064 samples, 0.11%)</title><rect x="62.0349%" y="101" width="0.1121%" height="15" fill="rgb(209,103,24)" fg:x="7227117" fg:w="13064"/><text x="62.2849%" y="111.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::impl$0::alloc (8,042 samples, 0.07%)</title><rect x="62.0780%" y="85" width="0.0690%" height="15" fill="rgb(229,88,8)" fg:x="7232139" fg:w="8042"/><text x="62.3280%" y="95.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::allocate (8,042 samples, 0.07%)</title><rect x="62.0780%" y="69" width="0.0690%" height="15" fill="rgb(213,181,19)" fg:x="7232139" fg:w="8042"/><text x="62.3280%" y="79.50"></text></g><g><title>`0x7FFFF8A73F90 (4,736 samples, 0.04%)</title><rect x="62.2234%" y="69" width="0.0407%" height="15" fill="rgb(254,191,54)" fg:x="7249084" fg:w="4736"/><text x="62.4734%" y="79.50"></text></g><g><title>`0x7FFFF8A73F99 (5,897 samples, 0.05%)</title><rect x="62.2641%" y="69" width="0.0506%" height="15" fill="rgb(241,83,37)" fg:x="7253820" fg:w="5897"/><text x="62.5141%" y="79.50"></text></g><g><title>Cherry-o.exe`core::intrinsics::unlikely (16,222 samples, 0.14%)</title><rect x="62.2116%" y="85" width="0.1392%" height="15" fill="rgb(233,36,39)" fg:x="7247708" fg:w="16222"/><text x="62.4616%" y="95.50"></text></g><g><title>`0x7FFFF8A73F9D (4,213 samples, 0.04%)</title><rect x="62.3147%" y="69" width="0.0362%" height="15" fill="rgb(226,3,54)" fg:x="7259717" fg:w="4213"/><text x="62.5647%" y="79.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::process_heap_alloc (24,054 samples, 0.21%)</title><rect x="62.1470%" y="101" width="0.2065%" height="15" fill="rgb(245,192,40)" fg:x="7240181" fg:w="24054"/><text x="62.3970%" y="111.50"></text></g><g><title>`0x7FFFF9CFB3AF (1,228 samples, 0.01%)</title><rect x="62.3852%" y="101" width="0.0105%" height="15" fill="rgb(238,167,29)" fg:x="7267931" fg:w="1228"/><text x="62.6352%" y="111.50"></text></g><g><title>`0x7FFFF9CFB3B3 (1,414 samples, 0.01%)</title><rect x="62.4024%" y="101" width="0.0121%" height="15" fill="rgb(232,182,51)" fg:x="7269936" fg:w="1414"/><text x="62.6524%" y="111.50"></text></g><g><title>`0x7FFFF9CFB3D5 (5,138 samples, 0.04%)</title><rect x="62.4354%" y="101" width="0.0441%" height="15" fill="rgb(231,60,39)" fg:x="7273779" fg:w="5138"/><text x="62.6854%" y="111.50"></text></g><g><title>`0x7FFFF9CFBEE0 (2,717 samples, 0.02%)</title><rect x="62.5093%" y="85" width="0.0233%" height="15" fill="rgb(208,69,12)" fg:x="7282393" fg:w="2717"/><text x="62.7593%" y="95.50"></text></g><g><title>`0x7FFFF9CFBF1A (1,502 samples, 0.01%)</title><rect x="62.5925%" y="85" width="0.0129%" height="15" fill="rgb(235,93,37)" fg:x="7292077" fg:w="1502"/><text x="62.8425%" y="95.50"></text></g><g><title>`0x7FFFF9CFBF3F (1,224 samples, 0.01%)</title><rect x="62.6316%" y="85" width="0.0105%" height="15" fill="rgb(213,116,39)" fg:x="7296632" fg:w="1224"/><text x="62.8816%" y="95.50"></text></g><g><title>`0x7FFFF9CFBF61 (1,453 samples, 0.01%)</title><rect x="62.6647%" y="85" width="0.0125%" height="15" fill="rgb(222,207,29)" fg:x="7300491" fg:w="1453"/><text x="62.9147%" y="95.50"></text></g><g><title>`0x7FFFF9CFBF75 (1,698 samples, 0.01%)</title><rect x="62.6808%" y="85" width="0.0146%" height="15" fill="rgb(206,96,30)" fg:x="7302367" fg:w="1698"/><text x="62.9308%" y="95.50"></text></g><g><title>`0x7FFFF9CFBF9C (1,221 samples, 0.01%)</title><rect x="62.7371%" y="85" width="0.0105%" height="15" fill="rgb(218,138,4)" fg:x="7308929" fg:w="1221"/><text x="62.9871%" y="95.50"></text></g><g><title>`0x7FFFF9CFBFBF (1,663 samples, 0.01%)</title><rect x="62.7638%" y="85" width="0.0143%" height="15" fill="rgb(250,191,14)" fg:x="7312033" fg:w="1663"/><text x="63.0138%" y="95.50"></text></g><g><title>`0x7FFFF9CFC590 (2,416 samples, 0.02%)</title><rect x="62.7879%" y="69" width="0.0207%" height="15" fill="rgb(239,60,40)" fg:x="7314846" fg:w="2416"/><text x="63.0379%" y="79.50"></text></g><g><title>`0x7FFFF9CFC5A5 (1,388 samples, 0.01%)</title><rect x="62.8455%" y="69" width="0.0119%" height="15" fill="rgb(206,27,48)" fg:x="7321552" fg:w="1388"/><text x="63.0955%" y="79.50"></text></g><g><title>`0x7FFFF9CFC5C5 (1,512 samples, 0.01%)</title><rect x="62.8863%" y="69" width="0.0130%" height="15" fill="rgb(225,35,8)" fg:x="7326310" fg:w="1512"/><text x="63.1363%" y="79.50"></text></g><g><title>`0x7FFFF9CFC5CC (1,877 samples, 0.02%)</title><rect x="62.8993%" y="69" width="0.0161%" height="15" fill="rgb(250,213,24)" fg:x="7327822" fg:w="1877"/><text x="63.1493%" y="79.50"></text></g><g><title>`0x7FFFF9CFC5F2 (2,066 samples, 0.02%)</title><rect x="62.9461%" y="69" width="0.0177%" height="15" fill="rgb(247,123,22)" fg:x="7333269" fg:w="2066"/><text x="63.1961%" y="79.50"></text></g><g><title>`0x7FFFF9CFC5F6 (1,202 samples, 0.01%)</title><rect x="62.9668%" y="69" width="0.0103%" height="15" fill="rgb(231,138,38)" fg:x="7335686" fg:w="1202"/><text x="63.2168%" y="79.50"></text></g><g><title>`0x7FFFF9CFC611 (3,330 samples, 0.03%)</title><rect x="62.9839%" y="69" width="0.0286%" height="15" fill="rgb(231,145,46)" fg:x="7337680" fg:w="3330"/><text x="63.2339%" y="79.50"></text></g><g><title>`0x7FFFF9CFC61D (1,573 samples, 0.01%)</title><rect x="63.0193%" y="69" width="0.0135%" height="15" fill="rgb(251,118,11)" fg:x="7341806" fg:w="1573"/><text x="63.2693%" y="79.50"></text></g><g><title>`0x7FFFF9CFC662 (3,637 samples, 0.03%)</title><rect x="63.0409%" y="69" width="0.0312%" height="15" fill="rgb(217,147,25)" fg:x="7344320" fg:w="3637"/><text x="63.2909%" y="79.50"></text></g><g><title>`0x7FFFF9CFC685 (1,804 samples, 0.02%)</title><rect x="63.0932%" y="69" width="0.0155%" height="15" fill="rgb(247,81,37)" fg:x="7350417" fg:w="1804"/><text x="63.3432%" y="79.50"></text></g><g><title>`0x7FFFF9CFC6A3 (1,495 samples, 0.01%)</title><rect x="63.1275%" y="69" width="0.0128%" height="15" fill="rgb(209,12,38)" fg:x="7354403" fg:w="1495"/><text x="63.3775%" y="79.50"></text></g><g><title>`0x7FFFF9CFC6F4 (2,145 samples, 0.02%)</title><rect x="63.1495%" y="69" width="0.0184%" height="15" fill="rgb(227,1,9)" fg:x="7356973" fg:w="2145"/><text x="63.3995%" y="79.50"></text></g><g><title>`0x7FFFF9CFC6FD (1,746 samples, 0.01%)</title><rect x="63.1707%" y="69" width="0.0150%" height="15" fill="rgb(248,47,43)" fg:x="7359436" fg:w="1746"/><text x="63.4207%" y="79.50"></text></g><g><title>`0x7FFFF9CFC700 (6,420 samples, 0.06%)</title><rect x="63.1856%" y="69" width="0.0551%" height="15" fill="rgb(221,10,30)" fg:x="7361182" fg:w="6420"/><text x="63.4356%" y="79.50"></text></g><g><title>`0x7FFFF9CFC70A (1,481 samples, 0.01%)</title><rect x="63.2434%" y="69" width="0.0127%" height="15" fill="rgb(210,229,1)" fg:x="7367914" fg:w="1481"/><text x="63.4934%" y="79.50"></text></g><g><title>`0x7FFFF9CFC717 (1,787 samples, 0.02%)</title><rect x="63.2631%" y="69" width="0.0153%" height="15" fill="rgb(222,148,37)" fg:x="7370210" fg:w="1787"/><text x="63.5131%" y="79.50"></text></g><g><title>`0x7FFFF9CFC743 (1,262 samples, 0.01%)</title><rect x="63.3167%" y="69" width="0.0108%" height="15" fill="rgb(234,67,33)" fg:x="7376449" fg:w="1262"/><text x="63.5667%" y="79.50"></text></g><g><title>`0x7FFFF9CFC757 (37,626 samples, 0.32%)</title><rect x="63.3409%" y="69" width="0.3230%" height="15" fill="rgb(247,98,35)" fg:x="7379275" fg:w="37626"/><text x="63.5909%" y="79.50"></text></g><g><title>`0x7FFFF9CFC770 (1,353 samples, 0.01%)</title><rect x="63.6674%" y="69" width="0.0116%" height="15" fill="rgb(247,138,52)" fg:x="7417312" fg:w="1353"/><text x="63.9174%" y="79.50"></text></g><g><title>`0x7FFFF9CFC7AC (1,549 samples, 0.01%)</title><rect x="63.6984%" y="69" width="0.0133%" height="15" fill="rgb(213,79,30)" fg:x="7420923" fg:w="1549"/><text x="63.9484%" y="79.50"></text></g><g><title>`0x7FFFF9CFC7DE (6,918 samples, 0.06%)</title><rect x="63.7314%" y="69" width="0.0594%" height="15" fill="rgb(246,177,23)" fg:x="7424763" fg:w="6918"/><text x="63.9814%" y="79.50"></text></g><g><title>`0x7FFFF9CFC808 (1,996 samples, 0.02%)</title><rect x="63.8082%" y="69" width="0.0171%" height="15" fill="rgb(230,62,27)" fg:x="7433713" fg:w="1996"/><text x="64.0582%" y="79.50"></text></g><g><title>`0x7FFFF9CFC819 (1,194 samples, 0.01%)</title><rect x="63.8302%" y="69" width="0.0102%" height="15" fill="rgb(216,154,8)" fg:x="7436276" fg:w="1194"/><text x="64.0802%" y="79.50"></text></g><g><title>`0x7FFFF9CFC82C (1,464 samples, 0.01%)</title><rect x="63.8491%" y="69" width="0.0126%" height="15" fill="rgb(244,35,45)" fg:x="7438474" fg:w="1464"/><text x="64.0991%" y="79.50"></text></g><g><title>`0x7FFFF9CFC83E (1,446 samples, 0.01%)</title><rect x="63.8759%" y="69" width="0.0124%" height="15" fill="rgb(251,115,12)" fg:x="7441595" fg:w="1446"/><text x="64.1259%" y="79.50"></text></g><g><title>`0x7FFFF9CFC84F (2,001 samples, 0.02%)</title><rect x="63.9035%" y="69" width="0.0172%" height="15" fill="rgb(240,54,50)" fg:x="7444809" fg:w="2001"/><text x="64.1535%" y="79.50"></text></g><g><title>`0x7FFFF9CFC855 (1,595 samples, 0.01%)</title><rect x="63.9272%" y="69" width="0.0137%" height="15" fill="rgb(233,84,52)" fg:x="7447576" fg:w="1595"/><text x="64.1772%" y="79.50"></text></g><g><title>`0x7FFFF9CFC85E (1,479 samples, 0.01%)</title><rect x="63.9527%" y="69" width="0.0127%" height="15" fill="rgb(207,117,47)" fg:x="7450542" fg:w="1479"/><text x="64.2027%" y="79.50"></text></g><g><title>`0x7FFFF9CFC87D (1,379 samples, 0.01%)</title><rect x="63.9920%" y="69" width="0.0118%" height="15" fill="rgb(249,43,39)" fg:x="7455118" fg:w="1379"/><text x="64.2420%" y="79.50"></text></g><g><title>`0x7FFFF9CFC894 (1,265 samples, 0.01%)</title><rect x="64.0230%" y="69" width="0.0109%" height="15" fill="rgb(209,38,44)" fg:x="7458736" fg:w="1265"/><text x="64.2730%" y="79.50"></text></g><g><title>`0x7FFFF9CFC89E (11,654 samples, 0.10%)</title><rect x="64.0464%" y="69" width="0.1000%" height="15" fill="rgb(236,212,23)" fg:x="7461459" fg:w="11654"/><text x="64.2964%" y="79.50"></text></g><g><title>`0x7FFFF9CFCCF5 (1,223 samples, 0.01%)</title><rect x="64.1663%" y="69" width="0.0105%" height="15" fill="rgb(242,79,21)" fg:x="7475429" fg:w="1223"/><text x="64.4163%" y="79.50"></text></g><g><title>`0x7FFFF9CFCD1F (1,251 samples, 0.01%)</title><rect x="64.1939%" y="69" width="0.0107%" height="15" fill="rgb(211,96,35)" fg:x="7478649" fg:w="1251"/><text x="64.4439%" y="79.50"></text></g><g><title>`0x7FFFF9CFCD32 (1,279 samples, 0.01%)</title><rect x="64.2202%" y="69" width="0.0110%" height="15" fill="rgb(253,215,40)" fg:x="7481708" fg:w="1279"/><text x="64.4702%" y="79.50"></text></g><g><title>`0x7FFFF9CFBFC4 (172,274 samples, 1.48%)</title><rect x="62.7780%" y="85" width="1.4787%" height="15" fill="rgb(211,81,21)" fg:x="7313696" fg:w="172274"/><text x="63.0280%" y="95.50"></text></g><g><title>`0x7FFFF9CFC071 (2,826 samples, 0.02%)</title><rect x="64.2685%" y="85" width="0.0243%" height="15" fill="rgb(208,190,38)" fg:x="7487335" fg:w="2826"/><text x="64.5185%" y="95.50"></text></g><g><title>`0x7FFFF9CFBE86 (216,056 samples, 1.85%)</title><rect x="62.5033%" y="101" width="1.8545%" height="15" fill="rgb(235,213,38)" fg:x="7281685" fg:w="216056"/><text x="62.7533%" y="111.50">`..</text></g><g><title>`0x7FFFF9CFBEA1 (1,266 samples, 0.01%)</title><rect x="64.3710%" y="101" width="0.0109%" height="15" fill="rgb(237,122,38)" fg:x="7499282" fg:w="1266"/><text x="64.6210%" y="111.50"></text></g><g><title>`0x7FFFF9E45113 (20,896 samples, 0.18%)</title><rect x="64.3998%" y="53" width="0.1794%" height="15" fill="rgb(244,218,35)" fg:x="7502635" fg:w="20896"/><text x="64.6498%" y="63.50"></text></g><g><title>`0x7FFFF9E45117 (5,341 samples, 0.05%)</title><rect x="64.5792%" y="53" width="0.0458%" height="15" fill="rgb(240,68,47)" fg:x="7523531" fg:w="5341"/><text x="64.8292%" y="63.50"></text></g><g><title>`0x7FFFF9D0AB69 (28,418 samples, 0.24%)</title><rect x="64.3942%" y="69" width="0.2439%" height="15" fill="rgb(210,16,53)" fg:x="7501977" fg:w="28418"/><text x="64.6442%" y="79.50"></text></g><g><title>Cherry-o.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h945a4cce548adf04E (374,510 samples, 3.21%)</title><rect x="61.4252%" y="133" width="3.2147%" height="15" fill="rgb(235,124,12)" fg:x="7156089" fg:w="374510"/><text x="61.6752%" y="143.50">Che..</text></g><g><title>Cherry-o.exe`_ZN5alloc7raw_vec11finish_grow17h03e42e572fb602d5E.llvm.18167578724102939905 (327,905 samples, 2.81%)</title><rect x="61.8252%" y="117" width="2.8146%" height="15" fill="rgb(224,169,11)" fg:x="7202694" fg:w="327905"/><text x="62.0752%" y="127.50">Ch..</text></g><g><title>`0x7FFFF9D09A86 (28,657 samples, 0.25%)</title><rect x="64.3939%" y="101" width="0.2460%" height="15" fill="rgb(250,166,2)" fg:x="7501942" fg:w="28657"/><text x="64.6439%" y="111.50"></text></g><g><title>`0x7FFFF9D09BC5 (28,656 samples, 0.25%)</title><rect x="64.3939%" y="85" width="0.2460%" height="15" fill="rgb(242,216,29)" fg:x="7501943" fg:w="28656"/><text x="64.6439%" y="95.50"></text></g><g><title>Cherry-o.exe`_ZN72_$LT$rand..rngs..thread..ThreadRng$u20$as$u20$core..default..Default$GT$7default17hfe5a1cb34eeba825E (2,625,136 samples, 22.53%)</title><rect x="64.6399%" y="133" width="22.5332%" height="15" fill="rgb(230,116,27)" fg:x="7530599" fg:w="2625136"/><text x="64.8899%" y="143.50">Cherry-o.exe`_ZN72_$LT$rand..rngs..t..</text></g><g><title>Cherry-o.exe`std::sys::pal::windows::time::Instant::now (2,031 samples, 0.02%)</title><rect x="87.1923%" y="101" width="0.0174%" height="15" fill="rgb(228,99,48)" fg:x="10157982" fg:w="2031"/><text x="87.4423%" y="111.50"></text></g><g><title>Cherry-o.exe`std::sys::pal::windows::time::perf_counter::PerformanceCounterInstant::now (1,986 samples, 0.02%)</title><rect x="87.1927%" y="85" width="0.0170%" height="15" fill="rgb(253,11,6)" fg:x="10158027" fg:w="1986"/><text x="87.4427%" y="95.50"></text></g><g><title>Cherry-o.exe`std::sys::pal::windows::time::perf_counter::query (1,986 samples, 0.02%)</title><rect x="87.1927%" y="69" width="0.0170%" height="15" fill="rgb(247,143,39)" fg:x="10158027" fg:w="1986"/><text x="87.4427%" y="79.50"></text></g><g><title>Cherry-o.exe`std::sys::pal::windows::cvt (1,975 samples, 0.02%)</title><rect x="87.1928%" y="53" width="0.0170%" height="15" fill="rgb(236,97,10)" fg:x="10158038" fg:w="1975"/><text x="87.4428%" y="63.50"></text></g><g><title>Cherry-o.exe`std::sys::pal::windows::impl$3::is_zero (1,975 samples, 0.02%)</title><rect x="87.1928%" y="37" width="0.0170%" height="15" fill="rgb(233,208,19)" fg:x="10158038" fg:w="1975"/><text x="87.4428%" y="47.50"></text></g><g><title>Cherry-o.exe`std::time::Instant::now (2,727 samples, 0.02%)</title><rect x="87.1920%" y="117" width="0.0234%" height="15" fill="rgb(216,164,2)" fg:x="10157947" fg:w="2727"/><text x="87.4420%" y="127.50"></text></g><g><title>Cherry-o.exe`_ZN9indicatif12progress_bar11ProgressBar3inc17hbf7b123b2543cab6E (5,180 samples, 0.04%)</title><rect x="87.1731%" y="133" width="0.0445%" height="15" fill="rgb(220,129,5)" fg:x="10155741" fg:w="5180"/><text x="87.4231%" y="143.50"></text></g><g><title>Cherry-o.exe`memcpy (4,414 samples, 0.04%)</title><rect x="87.2176%" y="133" width="0.0379%" height="15" fill="rgb(242,17,10)" fg:x="10160921" fg:w="4414"/><text x="87.4676%" y="143.50"></text></g><g><title>Cherry-o.exe`std::alloc::__default_lib_allocator::__rdl_alloc (22,187 samples, 0.19%)</title><rect x="87.2555%" y="133" width="0.1904%" height="15" fill="rgb(242,107,0)" fg:x="10165335" fg:w="22187"/><text x="87.5055%" y="143.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::impl$0::alloc (13,415 samples, 0.12%)</title><rect x="87.3307%" y="117" width="0.1151%" height="15" fill="rgb(251,28,31)" fg:x="10174107" fg:w="13415"/><text x="87.5807%" y="127.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::allocate (13,415 samples, 0.12%)</title><rect x="87.3307%" y="101" width="0.1151%" height="15" fill="rgb(233,223,10)" fg:x="10174107" fg:w="13415"/><text x="87.5807%" y="111.50"></text></g><g><title>`0x7FFFF8A73F90 (17,536 samples, 0.15%)</title><rect x="87.5771%" y="101" width="0.1505%" height="15" fill="rgb(215,21,27)" fg:x="10202803" fg:w="17536"/><text x="87.8271%" y="111.50"></text></g><g><title>`0x7FFFF8A73F99 (9,122 samples, 0.08%)</title><rect x="87.7276%" y="101" width="0.0783%" height="15" fill="rgb(232,23,21)" fg:x="10220339" fg:w="9122"/><text x="87.9776%" y="111.50"></text></g><g><title>Cherry-o.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (44,977 samples, 0.39%)</title><rect x="87.4459%" y="133" width="0.3861%" height="15" fill="rgb(244,5,23)" fg:x="10187522" fg:w="44977"/><text x="87.6959%" y="143.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::impl$0::dealloc (41,464 samples, 0.36%)</title><rect x="87.4760%" y="117" width="0.3559%" height="15" fill="rgb(226,81,46)" fg:x="10191035" fg:w="41464"/><text x="87.7260%" y="127.50"></text></g><g><title>`0x7FFFF8A73F9D (3,038 samples, 0.03%)</title><rect x="87.8059%" y="101" width="0.0261%" height="15" fill="rgb(247,70,30)" fg:x="10229461" fg:w="3038"/><text x="88.0559%" y="111.50"></text></g><g><title>`0x7FFFF8A73F90 (8,689 samples, 0.07%)</title><rect x="87.9915%" y="101" width="0.0746%" height="15" fill="rgb(212,68,19)" fg:x="10251080" fg:w="8689"/><text x="88.2415%" y="111.50"></text></g><g><title>`0x7FFFF8A73F99 (4,505 samples, 0.04%)</title><rect x="88.0660%" y="101" width="0.0387%" height="15" fill="rgb(240,187,13)" fg:x="10259769" fg:w="4505"/><text x="88.3160%" y="111.50"></text></g><g><title>Cherry-o.exe`core::intrinsics::unlikely (20,291 samples, 0.17%)</title><rect x="87.9653%" y="117" width="0.1742%" height="15" fill="rgb(223,113,26)" fg:x="10248037" fg:w="20291"/><text x="88.2153%" y="127.50"></text></g><g><title>`0x7FFFF8A73F9D (4,054 samples, 0.03%)</title><rect x="88.1047%" y="101" width="0.0348%" height="15" fill="rgb(206,192,2)" fg:x="10264274" fg:w="4054"/><text x="88.3547%" y="111.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::process_heap_alloc (35,972 samples, 0.31%)</title><rect x="87.8320%" y="133" width="0.3088%" height="15" fill="rgb(241,108,4)" fg:x="10232499" fg:w="35972"/><text x="88.0820%" y="143.50"></text></g><g><title>`0x7FFFE9580240 (3,260 samples, 0.03%)</title><rect x="88.1407%" y="133" width="0.0280%" height="15" fill="rgb(247,173,49)" fg:x="10268471" fg:w="3260"/><text x="88.3907%" y="143.50"></text></g><g><title>`0x7FFFE958036A (6,051 samples, 0.05%)</title><rect x="88.1937%" y="133" width="0.0519%" height="15" fill="rgb(224,114,35)" fg:x="10274640" fg:w="6051"/><text x="88.4437%" y="143.50"></text></g><g><title>`0x7FFFE9580371 (4,688 samples, 0.04%)</title><rect x="88.2456%" y="133" width="0.0402%" height="15" fill="rgb(245,159,27)" fg:x="10280691" fg:w="4688"/><text x="88.4956%" y="143.50"></text></g><g><title>`0x7FFFE9580375 (2,426 samples, 0.02%)</title><rect x="88.2859%" y="133" width="0.0208%" height="15" fill="rgb(245,172,44)" fg:x="10285379" fg:w="2426"/><text x="88.5359%" y="143.50"></text></g><g><title>`0x7FFFE9583010 (2,701 samples, 0.02%)</title><rect x="88.3128%" y="133" width="0.0232%" height="15" fill="rgb(236,23,11)" fg:x="10288520" fg:w="2701"/><text x="88.5628%" y="143.50"></text></g><g><title>`0x7FFFF8A74980 (3,904 samples, 0.03%)</title><rect x="88.3360%" y="133" width="0.0335%" height="15" fill="rgb(205,117,38)" fg:x="10291221" fg:w="3904"/><text x="88.5860%" y="143.50"></text></g><g><title>`0x7FFFF9CFB3A0 (1,173 samples, 0.01%)</title><rect x="88.3695%" y="133" width="0.0101%" height="15" fill="rgb(237,72,25)" fg:x="10295125" fg:w="1173"/><text x="88.6195%" y="143.50"></text></g><g><title>`0x7FFFF9CFB3A5 (2,512 samples, 0.02%)</title><rect x="88.3796%" y="133" width="0.0216%" height="15" fill="rgb(244,70,9)" fg:x="10296298" fg:w="2512"/><text x="88.6296%" y="143.50"></text></g><g><title>`0x7FFFF9CFB3AB (1,854 samples, 0.02%)</title><rect x="88.4048%" y="133" width="0.0159%" height="15" fill="rgb(217,125,39)" fg:x="10299234" fg:w="1854"/><text x="88.6548%" y="143.50"></text></g><g><title>`0x7FFFF9CFB3AF (2,035 samples, 0.02%)</title><rect x="88.4255%" y="133" width="0.0175%" height="15" fill="rgb(235,36,10)" fg:x="10301652" fg:w="2035"/><text x="88.6755%" y="143.50"></text></g><g><title>`0x7FFFF9CFB3B3 (1,216 samples, 0.01%)</title><rect x="88.4499%" y="133" width="0.0104%" height="15" fill="rgb(251,123,47)" fg:x="10304489" fg:w="1216"/><text x="88.6999%" y="143.50"></text></g><g><title>`0x7FFFF9CFB3BA (1,316 samples, 0.01%)</title><rect x="88.4603%" y="133" width="0.0113%" height="15" fill="rgb(221,13,13)" fg:x="10305705" fg:w="1316"/><text x="88.7103%" y="143.50"></text></g><g><title>`0x7FFFF9CFB3C2 (2,513 samples, 0.02%)</title><rect x="88.4749%" y="133" width="0.0216%" height="15" fill="rgb(238,131,9)" fg:x="10307397" fg:w="2513"/><text x="88.7249%" y="143.50"></text></g><g><title>`0x7FFFF9CFB3D5 (8,723 samples, 0.07%)</title><rect x="88.5100%" y="133" width="0.0749%" height="15" fill="rgb(211,50,8)" fg:x="10311486" fg:w="8723"/><text x="88.7600%" y="143.50"></text></g><g><title>`0x7FFFF9CFBE6F (1,757 samples, 0.02%)</title><rect x="88.5848%" y="133" width="0.0151%" height="15" fill="rgb(245,182,24)" fg:x="10320209" fg:w="1757"/><text x="88.8348%" y="143.50"></text></g><g><title>`0x7FFFF9CFBE7F (2,754 samples, 0.02%)</title><rect x="88.6057%" y="133" width="0.0236%" height="15" fill="rgb(242,14,37)" fg:x="10322642" fg:w="2754"/><text x="88.8557%" y="143.50"></text></g><g><title>`0x7FFFF9CFBEE0 (4,287 samples, 0.04%)</title><rect x="88.6436%" y="117" width="0.0368%" height="15" fill="rgb(246,228,12)" fg:x="10327051" fg:w="4287"/><text x="88.8936%" y="127.50"></text></g><g><title>`0x7FFFF9CFBEE3 (1,200 samples, 0.01%)</title><rect x="88.6804%" y="117" width="0.0103%" height="15" fill="rgb(213,55,15)" fg:x="10331338" fg:w="1200"/><text x="88.9304%" y="127.50"></text></g><g><title>`0x7FFFF9CFBEF0 (1,305 samples, 0.01%)</title><rect x="88.7119%" y="117" width="0.0112%" height="15" fill="rgb(209,9,3)" fg:x="10335012" fg:w="1305"/><text x="88.9619%" y="127.50"></text></g><g><title>`0x7FFFF9CFBEF7 (3,418 samples, 0.03%)</title><rect x="88.7231%" y="117" width="0.0293%" height="15" fill="rgb(230,59,30)" fg:x="10336317" fg:w="3418"/><text x="88.9731%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF1A (4,285 samples, 0.04%)</title><rect x="88.7867%" y="117" width="0.0368%" height="15" fill="rgb(209,121,21)" fg:x="10343724" fg:w="4285"/><text x="89.0367%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF24 (1,189 samples, 0.01%)</title><rect x="88.8264%" y="117" width="0.0102%" height="15" fill="rgb(220,109,13)" fg:x="10348347" fg:w="1189"/><text x="89.0764%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF3B (1,317 samples, 0.01%)</title><rect x="88.8527%" y="117" width="0.0113%" height="15" fill="rgb(232,18,1)" fg:x="10351421" fg:w="1317"/><text x="89.1027%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF3F (2,666 samples, 0.02%)</title><rect x="88.8640%" y="117" width="0.0229%" height="15" fill="rgb(215,41,42)" fg:x="10352738" fg:w="2666"/><text x="89.1140%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF61 (2,621 samples, 0.02%)</title><rect x="88.9235%" y="117" width="0.0225%" height="15" fill="rgb(224,123,36)" fg:x="10359661" fg:w="2621"/><text x="89.1735%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF6E (1,174 samples, 0.01%)</title><rect x="88.9494%" y="117" width="0.0101%" height="15" fill="rgb(240,125,3)" fg:x="10362682" fg:w="1174"/><text x="89.1994%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF75 (1,959 samples, 0.02%)</title><rect x="88.9595%" y="117" width="0.0168%" height="15" fill="rgb(205,98,50)" fg:x="10363856" fg:w="1959"/><text x="89.2095%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF89 (1,905 samples, 0.02%)</title><rect x="89.0000%" y="117" width="0.0164%" height="15" fill="rgb(205,185,37)" fg:x="10368578" fg:w="1905"/><text x="89.2500%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF8B (1,653 samples, 0.01%)</title><rect x="89.0164%" y="117" width="0.0142%" height="15" fill="rgb(238,207,15)" fg:x="10370483" fg:w="1653"/><text x="89.2664%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF93 (2,473 samples, 0.02%)</title><rect x="89.0306%" y="117" width="0.0212%" height="15" fill="rgb(213,199,42)" fg:x="10372136" fg:w="2473"/><text x="89.2806%" y="127.50"></text></g><g><title>`0x7FFFF9CFBF9C (1,347 samples, 0.01%)</title><rect x="89.0540%" y="117" width="0.0116%" height="15" fill="rgb(235,201,11)" fg:x="10374867" fg:w="1347"/><text x="89.3040%" y="127.50"></text></g><g><title>`0x7FFFF9CFBFB0 (1,765 samples, 0.02%)</title><rect x="89.0851%" y="117" width="0.0152%" height="15" fill="rgb(207,46,11)" fg:x="10378495" fg:w="1765"/><text x="89.3351%" y="127.50"></text></g><g><title>`0x7FFFF9CFBFBF (3,322 samples, 0.03%)</title><rect x="89.1046%" y="117" width="0.0285%" height="15" fill="rgb(241,35,35)" fg:x="10380759" fg:w="3322"/><text x="89.3546%" y="127.50"></text></g><g><title>`0x7FFFF9CFC590 (4,142 samples, 0.04%)</title><rect x="89.1482%" y="101" width="0.0356%" height="15" fill="rgb(243,32,47)" fg:x="10385847" fg:w="4142"/><text x="89.3982%" y="111.50"></text></g><g><title>`0x7FFFF9CFC5A2 (1,649 samples, 0.01%)</title><rect x="89.2118%" y="101" width="0.0142%" height="15" fill="rgb(247,202,23)" fg:x="10393253" fg:w="1649"/><text x="89.4618%" y="111.50"></text></g><g><title>`0x7FFFF9CFC5A3 (1,384 samples, 0.01%)</title><rect x="89.2260%" y="101" width="0.0119%" height="15" fill="rgb(219,102,11)" fg:x="10394902" fg:w="1384"/><text x="89.4760%" y="111.50"></text></g><g><title>`0x7FFFF9CFC5A5 (2,399 samples, 0.02%)</title><rect x="89.2378%" y="101" width="0.0206%" height="15" fill="rgb(243,110,44)" fg:x="10396286" fg:w="2399"/><text x="89.4878%" y="111.50"></text></g><g><title>`0x7FFFF9CFC5C5 (3,367 samples, 0.03%)</title><rect x="89.3009%" y="101" width="0.0289%" height="15" fill="rgb(222,74,54)" fg:x="10403630" fg:w="3367"/><text x="89.5509%" y="111.50"></text></g><g><title>`0x7FFFF9CFC5CC (4,226 samples, 0.04%)</title><rect x="89.3298%" y="101" width="0.0363%" height="15" fill="rgb(216,99,12)" fg:x="10406997" fg:w="4226"/><text x="89.5798%" y="111.50"></text></g><g><title>`0x7FFFF9CFC5EC (2,923 samples, 0.03%)</title><rect x="89.3964%" y="101" width="0.0251%" height="15" fill="rgb(226,22,26)" fg:x="10414756" fg:w="2923"/><text x="89.6464%" y="111.50"></text></g><g><title>`0x7FFFF9CFC5F2 (4,061 samples, 0.03%)</title><rect x="89.4215%" y="101" width="0.0349%" height="15" fill="rgb(217,163,10)" fg:x="10417679" fg:w="4061"/><text x="89.6715%" y="111.50"></text></g><g><title>`0x7FFFF9CFC5F6 (1,436 samples, 0.01%)</title><rect x="89.4583%" y="101" width="0.0123%" height="15" fill="rgb(213,25,53)" fg:x="10421966" fg:w="1436"/><text x="89.7083%" y="111.50"></text></g><g><title>`0x7FFFF9CFC611 (4,607 samples, 0.04%)</title><rect x="89.4880%" y="101" width="0.0395%" height="15" fill="rgb(252,105,26)" fg:x="10425430" fg:w="4607"/><text x="89.7380%" y="111.50"></text></g><g><title>`0x7FFFF9CFC615 (1,648 samples, 0.01%)</title><rect x="89.5276%" y="101" width="0.0141%" height="15" fill="rgb(220,39,43)" fg:x="10430037" fg:w="1648"/><text x="89.7776%" y="111.50"></text></g><g><title>`0x7FFFF9CFC61D (4,136 samples, 0.04%)</title><rect x="89.5417%" y="101" width="0.0355%" height="15" fill="rgb(229,68,48)" fg:x="10431685" fg:w="4136"/><text x="89.7917%" y="111.50"></text></g><g><title>`0x7FFFF9CFC662 (6,439 samples, 0.06%)</title><rect x="89.5862%" y="101" width="0.0553%" height="15" fill="rgb(252,8,32)" fg:x="10436864" fg:w="6439"/><text x="89.8362%" y="111.50"></text></g><g><title>`0x7FFFF9CFC685 (3,601 samples, 0.03%)</title><rect x="89.6753%" y="101" width="0.0309%" height="15" fill="rgb(223,20,43)" fg:x="10447253" fg:w="3601"/><text x="89.9253%" y="111.50"></text></g><g><title>`0x7FFFF9CFC68D (1,178 samples, 0.01%)</title><rect x="89.7091%" y="101" width="0.0101%" height="15" fill="rgb(229,81,49)" fg:x="10451192" fg:w="1178"/><text x="89.9591%" y="111.50"></text></g><g><title>`0x7FFFF9CFC6A3 (2,846 samples, 0.02%)</title><rect x="89.7297%" y="101" width="0.0244%" height="15" fill="rgb(236,28,36)" fg:x="10453592" fg:w="2846"/><text x="89.9797%" y="111.50"></text></g><g><title>`0x7FFFF9CFC6F4 (5,005 samples, 0.04%)</title><rect x="89.7750%" y="101" width="0.0430%" height="15" fill="rgb(249,185,26)" fg:x="10458864" fg:w="5005"/><text x="90.0250%" y="111.50"></text></g><g><title>`0x7FFFF9CFC6FD (2,638 samples, 0.02%)</title><rect x="89.8203%" y="101" width="0.0226%" height="15" fill="rgb(249,174,33)" fg:x="10464145" fg:w="2638"/><text x="90.0703%" y="111.50"></text></g><g><title>`0x7FFFF9CFC700 (12,636 samples, 0.11%)</title><rect x="89.8430%" y="101" width="0.1085%" height="15" fill="rgb(233,201,37)" fg:x="10466783" fg:w="12636"/><text x="90.0930%" y="111.50"></text></g><g><title>`0x7FFFF9CFC70A (2,039 samples, 0.02%)</title><rect x="89.9605%" y="101" width="0.0175%" height="15" fill="rgb(221,78,26)" fg:x="10480470" fg:w="2039"/><text x="90.2105%" y="111.50"></text></g><g><title>`0x7FFFF9CFC70E (1,351 samples, 0.01%)</title><rect x="89.9780%" y="101" width="0.0116%" height="15" fill="rgb(250,127,30)" fg:x="10482509" fg:w="1351"/><text x="90.2280%" y="111.50"></text></g><g><title>`0x7FFFF9CFC717 (2,317 samples, 0.02%)</title><rect x="89.9954%" y="101" width="0.0199%" height="15" fill="rgb(230,49,44)" fg:x="10484547" fg:w="2317"/><text x="90.2454%" y="111.50"></text></g><g><title>`0x7FFFF9CFC726 (1,413 samples, 0.01%)</title><rect x="90.0236%" y="101" width="0.0121%" height="15" fill="rgb(229,67,23)" fg:x="10487829" fg:w="1413"/><text x="90.2736%" y="111.50"></text></g><g><title>`0x7FFFF9CFC735 (1,345 samples, 0.01%)</title><rect x="90.0471%" y="101" width="0.0115%" height="15" fill="rgb(249,83,47)" fg:x="10490559" fg:w="1345"/><text x="90.2971%" y="111.50"></text></g><g><title>`0x7FFFF9CFC738 (2,051 samples, 0.02%)</title><rect x="90.0586%" y="101" width="0.0176%" height="15" fill="rgb(215,43,3)" fg:x="10491904" fg:w="2051"/><text x="90.3086%" y="111.50"></text></g><g><title>`0x7FFFF9CFC743 (1,946 samples, 0.02%)</title><rect x="90.0904%" y="101" width="0.0167%" height="15" fill="rgb(238,154,13)" fg:x="10495609" fg:w="1946"/><text x="90.3404%" y="111.50"></text></g><g><title>`0x7FFFF9CFC757 (81,275 samples, 0.70%)</title><rect x="90.1274%" y="101" width="0.6976%" height="15" fill="rgb(219,56,2)" fg:x="10499920" fg:w="81275"/><text x="90.3774%" y="111.50"></text></g><g><title>`0x7FFFF9CFC770 (2,959 samples, 0.03%)</title><rect x="90.8257%" y="101" width="0.0254%" height="15" fill="rgb(233,0,4)" fg:x="10581275" fg:w="2959"/><text x="91.0757%" y="111.50"></text></g><g><title>`0x7FFFF9CFC7AC (3,319 samples, 0.03%)</title><rect x="90.8889%" y="101" width="0.0285%" height="15" fill="rgb(235,30,7)" fg:x="10588635" fg:w="3319"/><text x="91.1389%" y="111.50"></text></g><g><title>`0x7FFFF9CFC7DE (16,486 samples, 0.14%)</title><rect x="90.9556%" y="101" width="0.1415%" height="15" fill="rgb(250,79,13)" fg:x="10596407" fg:w="16486"/><text x="91.2056%" y="111.50"></text></g><g><title>`0x7FFFF9CFC808 (3,353 samples, 0.03%)</title><rect x="91.1294%" y="101" width="0.0288%" height="15" fill="rgb(211,146,34)" fg:x="10616650" fg:w="3353"/><text x="91.3794%" y="111.50"></text></g><g><title>`0x7FFFF9CFC819 (1,916 samples, 0.02%)</title><rect x="91.1727%" y="101" width="0.0164%" height="15" fill="rgb(228,22,38)" fg:x="10621699" fg:w="1916"/><text x="91.4227%" y="111.50"></text></g><g><title>`0x7FFFF9CFC82C (3,092 samples, 0.03%)</title><rect x="91.2065%" y="101" width="0.0265%" height="15" fill="rgb(235,168,5)" fg:x="10625631" fg:w="3092"/><text x="91.4565%" y="111.50"></text></g><g><title>`0x7FFFF9CFC82F (1,284 samples, 0.01%)</title><rect x="91.2330%" y="101" width="0.0110%" height="15" fill="rgb(221,155,16)" fg:x="10628723" fg:w="1284"/><text x="91.4830%" y="111.50"></text></g><g><title>`0x7FFFF9CFC838 (1,442 samples, 0.01%)</title><rect x="91.2471%" y="101" width="0.0124%" height="15" fill="rgb(215,215,53)" fg:x="10630360" fg:w="1442"/><text x="91.4971%" y="111.50"></text></g><g><title>`0x7FFFF9CFC83E (2,637 samples, 0.02%)</title><rect x="91.2663%" y="101" width="0.0226%" height="15" fill="rgb(223,4,10)" fg:x="10632604" fg:w="2637"/><text x="91.5163%" y="111.50"></text></g><g><title>`0x7FFFF9CFC847 (2,095 samples, 0.02%)</title><rect x="91.2981%" y="101" width="0.0180%" height="15" fill="rgb(234,103,6)" fg:x="10636309" fg:w="2095"/><text x="91.5481%" y="111.50"></text></g><g><title>`0x7FFFF9CFC84F (2,949 samples, 0.03%)</title><rect x="91.3190%" y="101" width="0.0253%" height="15" fill="rgb(227,97,0)" fg:x="10638744" fg:w="2949"/><text x="91.5690%" y="111.50"></text></g><g><title>`0x7FFFF9CFC852 (1,643 samples, 0.01%)</title><rect x="91.3443%" y="101" width="0.0141%" height="15" fill="rgb(234,150,53)" fg:x="10641693" fg:w="1643"/><text x="91.5943%" y="111.50"></text></g><g><title>`0x7FFFF9CFC855 (3,994 samples, 0.03%)</title><rect x="91.3584%" y="101" width="0.0343%" height="15" fill="rgb(228,201,54)" fg:x="10643336" fg:w="3994"/><text x="91.6084%" y="111.50"></text></g><g><title>`0x7FFFF9CFC85B (1,524 samples, 0.01%)</title><rect x="91.3952%" y="101" width="0.0131%" height="15" fill="rgb(222,22,37)" fg:x="10647622" fg:w="1524"/><text x="91.6452%" y="111.50"></text></g><g><title>`0x7FFFF9CFC85E (2,960 samples, 0.03%)</title><rect x="91.4083%" y="101" width="0.0254%" height="15" fill="rgb(237,53,32)" fg:x="10649146" fg:w="2960"/><text x="91.6583%" y="111.50"></text></g><g><title>`0x7FFFF9CFC870 (1,961 samples, 0.02%)</title><rect x="91.4480%" y="101" width="0.0168%" height="15" fill="rgb(233,25,53)" fg:x="10653767" fg:w="1961"/><text x="91.6980%" y="111.50"></text></g><g><title>`0x7FFFF9CFC878 (2,028 samples, 0.02%)</title><rect x="91.4693%" y="101" width="0.0174%" height="15" fill="rgb(210,40,34)" fg:x="10656253" fg:w="2028"/><text x="91.7193%" y="111.50"></text></g><g><title>`0x7FFFF9CFC87D (2,136 samples, 0.02%)</title><rect x="91.4956%" y="101" width="0.0183%" height="15" fill="rgb(241,220,44)" fg:x="10659312" fg:w="2136"/><text x="91.7456%" y="111.50"></text></g><g><title>`0x7FFFF9CFC888 (2,147 samples, 0.02%)</title><rect x="91.5187%" y="101" width="0.0184%" height="15" fill="rgb(235,28,35)" fg:x="10662010" fg:w="2147"/><text x="91.7687%" y="111.50"></text></g><g><title>`0x7FFFF9CFC894 (3,201 samples, 0.03%)</title><rect x="91.5498%" y="101" width="0.0275%" height="15" fill="rgb(210,56,17)" fg:x="10665635" fg:w="3201"/><text x="91.7998%" y="111.50"></text></g><g><title>`0x7FFFF9CFC89E (23,994 samples, 0.21%)</title><rect x="91.5929%" y="101" width="0.2060%" height="15" fill="rgb(224,130,29)" fg:x="10670647" fg:w="23994"/><text x="91.8429%" y="111.50"></text></g><g><title>`0x7FFFF9CFC8A4 (2,313 samples, 0.02%)</title><rect x="91.7988%" y="101" width="0.0199%" height="15" fill="rgb(235,212,8)" fg:x="10694641" fg:w="2313"/><text x="92.0488%" y="111.50"></text></g><g><title>`0x7FFFF9CFCCF5 (2,163 samples, 0.02%)</title><rect x="91.8444%" y="101" width="0.0186%" height="15" fill="rgb(223,33,50)" fg:x="10699950" fg:w="2163"/><text x="92.0944%" y="111.50"></text></g><g><title>`0x7FFFF9CFCD1F (1,991 samples, 0.02%)</title><rect x="91.8978%" y="101" width="0.0171%" height="15" fill="rgb(219,149,13)" fg:x="10706172" fg:w="1991"/><text x="92.1478%" y="111.50"></text></g><g><title>`0x7FFFF9CFCD21 (1,251 samples, 0.01%)</title><rect x="91.9149%" y="101" width="0.0107%" height="15" fill="rgb(250,156,29)" fg:x="10708163" fg:w="1251"/><text x="92.1649%" y="111.50"></text></g><g><title>`0x7FFFF9CFCD32 (2,411 samples, 0.02%)</title><rect x="91.9506%" y="101" width="0.0207%" height="15" fill="rgb(216,193,19)" fg:x="10712321" fg:w="2411"/><text x="92.2006%" y="111.50"></text></g><g><title>`0x7FFFF9CFBFC4 (336,917 samples, 2.89%)</title><rect x="89.1331%" y="117" width="2.8920%" height="15" fill="rgb(216,135,14)" fg:x="10384081" fg:w="336917"/><text x="89.3831%" y="127.50">`0..</text></g><g><title>`0x7FFFF9CFDE17 (1,637 samples, 0.01%)</title><rect x="92.0110%" y="101" width="0.0141%" height="15" fill="rgb(241,47,5)" fg:x="10719361" fg:w="1637"/><text x="92.2610%" y="111.50"></text></g><g><title>`0x7FFFF9CFC071 (4,699 samples, 0.04%)</title><rect x="92.0572%" y="117" width="0.0403%" height="15" fill="rgb(233,42,35)" fg:x="10724742" fg:w="4699"/><text x="92.3072%" y="127.50"></text></g><g><title>`0x7FFFF9CFC076 (1,383 samples, 0.01%)</title><rect x="92.0975%" y="117" width="0.0119%" height="15" fill="rgb(231,13,6)" fg:x="10729441" fg:w="1383"/><text x="92.3475%" y="127.50"></text></g><g><title>`0x7FFFF9CFC09F (2,401 samples, 0.02%)</title><rect x="92.1449%" y="117" width="0.0206%" height="15" fill="rgb(207,181,40)" fg:x="10734965" fg:w="2401"/><text x="92.3949%" y="127.50"></text></g><g><title>`0x7FFFF9CFC0A4 (1,428 samples, 0.01%)</title><rect x="92.1656%" y="117" width="0.0123%" height="15" fill="rgb(254,173,49)" fg:x="10737366" fg:w="1428"/><text x="92.4156%" y="127.50"></text></g><g><title>`0x7FFFF9CFC0B5 (2,592 samples, 0.02%)</title><rect x="92.2017%" y="117" width="0.0222%" height="15" fill="rgb(221,1,38)" fg:x="10741577" fg:w="2592"/><text x="92.4517%" y="127.50"></text></g><g><title>`0x7FFFF9CFBE86 (419,815 samples, 3.60%)</title><rect x="88.6341%" y="133" width="3.6035%" height="15" fill="rgb(206,124,46)" fg:x="10325952" fg:w="419815"/><text x="88.8841%" y="143.50">`0x7..</text></g><g><title>`0x7FFFF9CFBE94 (1,219 samples, 0.01%)</title><rect x="92.2432%" y="133" width="0.0105%" height="15" fill="rgb(249,21,11)" fg:x="10746409" fg:w="1219"/><text x="92.4932%" y="143.50"></text></g><g><title>`0x7FFFF9CFBEA1 (2,109 samples, 0.02%)</title><rect x="92.2676%" y="133" width="0.0181%" height="15" fill="rgb(222,201,40)" fg:x="10749258" fg:w="2109"/><text x="92.5176%" y="143.50"></text></g><g><title>`0x7FFFF9D06930 (11,073 samples, 0.10%)</title><rect x="92.3086%" y="133" width="0.0950%" height="15" fill="rgb(235,61,29)" fg:x="10754032" fg:w="11073"/><text x="92.5586%" y="143.50"></text></g><g><title>`0x7FFFF9D06935 (4,614 samples, 0.04%)</title><rect x="92.4037%" y="133" width="0.0396%" height="15" fill="rgb(219,207,3)" fg:x="10765105" fg:w="4614"/><text x="92.6537%" y="143.50"></text></g><g><title>`0x7FFFF9D0693E (6,375 samples, 0.05%)</title><rect x="92.4471%" y="133" width="0.0547%" height="15" fill="rgb(222,56,46)" fg:x="10770165" fg:w="6375"/><text x="92.6971%" y="143.50"></text></g><g><title>`0x7FFFF9D06940 (1,652 samples, 0.01%)</title><rect x="92.5112%" y="133" width="0.0142%" height="15" fill="rgb(239,76,54)" fg:x="10777637" fg:w="1652"/><text x="92.7612%" y="143.50"></text></g><g><title>`0x7FFFF9D06943 (1,810 samples, 0.02%)</title><rect x="92.5326%" y="133" width="0.0155%" height="15" fill="rgb(231,124,27)" fg:x="10780133" fg:w="1810"/><text x="92.7826%" y="143.50"></text></g><g><title>`0x7FFFF9D06950 (6,095 samples, 0.05%)</title><rect x="92.5644%" y="133" width="0.0523%" height="15" fill="rgb(249,195,6)" fg:x="10783837" fg:w="6095"/><text x="92.8144%" y="143.50"></text></g><g><title>`0x7FFFF9D0696A (3,391 samples, 0.03%)</title><rect x="92.6426%" y="133" width="0.0291%" height="15" fill="rgb(237,174,47)" fg:x="10792944" fg:w="3391"/><text x="92.8926%" y="143.50"></text></g><g><title>`0x7FFFF9D06970 (1,647 samples, 0.01%)</title><rect x="92.6717%" y="133" width="0.0141%" height="15" fill="rgb(206,201,31)" fg:x="10796335" fg:w="1647"/><text x="92.9217%" y="143.50"></text></g><g><title>`0x7FFFF9D06977 (5,097 samples, 0.04%)</title><rect x="92.6859%" y="133" width="0.0438%" height="15" fill="rgb(231,57,52)" fg:x="10797982" fg:w="5097"/><text x="92.9359%" y="143.50"></text></g><g><title>`0x7FFFF9D06987 (2,157 samples, 0.02%)</title><rect x="92.7380%" y="133" width="0.0185%" height="15" fill="rgb(248,177,22)" fg:x="10804058" fg:w="2157"/><text x="92.9880%" y="143.50"></text></g><g><title>`0x7FFFF9D069A6 (4,086 samples, 0.04%)</title><rect x="92.7972%" y="133" width="0.0351%" height="15" fill="rgb(215,211,37)" fg:x="10810959" fg:w="4086"/><text x="93.0472%" y="143.50"></text></g><g><title>`0x7FFFF9D069AD (3,322 samples, 0.03%)</title><rect x="92.8373%" y="133" width="0.0285%" height="15" fill="rgb(241,128,51)" fg:x="10815623" fg:w="3322"/><text x="93.0873%" y="143.50"></text></g><g><title>`0x7FFFF9D069B3 (1,212 samples, 0.01%)</title><rect x="92.8658%" y="133" width="0.0104%" height="15" fill="rgb(227,165,31)" fg:x="10818945" fg:w="1212"/><text x="93.1158%" y="143.50"></text></g><g><title>`0x7FFFF9D069B7 (1,696 samples, 0.01%)</title><rect x="92.8762%" y="133" width="0.0146%" height="15" fill="rgb(228,167,24)" fg:x="10820157" fg:w="1696"/><text x="93.1262%" y="143.50"></text></g><g><title>`0x7FFFF9D069C0 (1,283 samples, 0.01%)</title><rect x="92.9005%" y="133" width="0.0110%" height="15" fill="rgb(228,143,12)" fg:x="10822991" fg:w="1283"/><text x="93.1505%" y="143.50"></text></g><g><title>`0x7FFFF9D069CA (4,610 samples, 0.04%)</title><rect x="92.9185%" y="133" width="0.0396%" height="15" fill="rgb(249,149,8)" fg:x="10825086" fg:w="4610"/><text x="93.1685%" y="143.50"></text></g><g><title>`0x7FFFF9D069D0 (1,289 samples, 0.01%)</title><rect x="92.9581%" y="133" width="0.0111%" height="15" fill="rgb(243,35,44)" fg:x="10829696" fg:w="1289"/><text x="93.2081%" y="143.50"></text></g><g><title>`0x7FFFF9D069D4 (1,299 samples, 0.01%)</title><rect x="92.9691%" y="133" width="0.0112%" height="15" fill="rgb(246,89,9)" fg:x="10830985" fg:w="1299"/><text x="93.2191%" y="143.50"></text></g><g><title>`0x7FFFF9D069DA (1,262 samples, 0.01%)</title><rect x="92.9803%" y="133" width="0.0108%" height="15" fill="rgb(233,213,13)" fg:x="10832284" fg:w="1262"/><text x="93.2303%" y="143.50"></text></g><g><title>`0x7FFFF9D069E8 (1,228 samples, 0.01%)</title><rect x="93.0031%" y="133" width="0.0105%" height="15" fill="rgb(233,141,41)" fg:x="10834945" fg:w="1228"/><text x="93.2531%" y="143.50"></text></g><g><title>`0x7FFFF9D069EB (1,629 samples, 0.01%)</title><rect x="93.0137%" y="133" width="0.0140%" height="15" fill="rgb(239,167,4)" fg:x="10836173" fg:w="1629"/><text x="93.2637%" y="143.50"></text></g><g><title>`0x7FFFF9D069EE (3,937 samples, 0.03%)</title><rect x="93.0277%" y="133" width="0.0338%" height="15" fill="rgb(209,217,16)" fg:x="10837802" fg:w="3937"/><text x="93.2777%" y="143.50"></text></g><g><title>`0x7FFFF9D069F1 (1,169 samples, 0.01%)</title><rect x="93.0615%" y="133" width="0.0100%" height="15" fill="rgb(219,88,35)" fg:x="10841739" fg:w="1169"/><text x="93.3115%" y="143.50"></text></g><g><title>`0x7FFFF9D069FC (3,006 samples, 0.03%)</title><rect x="93.0797%" y="133" width="0.0258%" height="15" fill="rgb(220,193,23)" fg:x="10843863" fg:w="3006"/><text x="93.3297%" y="143.50"></text></g><g><title>`0x7FFFF9D06A05 (2,514 samples, 0.02%)</title><rect x="93.1134%" y="133" width="0.0216%" height="15" fill="rgb(230,90,52)" fg:x="10847795" fg:w="2514"/><text x="93.3634%" y="143.50"></text></g><g><title>`0x7FFFF9D06A08 (7,975 samples, 0.07%)</title><rect x="93.1350%" y="133" width="0.0685%" height="15" fill="rgb(252,106,19)" fg:x="10850309" fg:w="7975"/><text x="93.3850%" y="143.50"></text></g><g><title>`0x7FFFF9D06A0C (2,271 samples, 0.02%)</title><rect x="93.2035%" y="133" width="0.0195%" height="15" fill="rgb(206,74,20)" fg:x="10858284" fg:w="2271"/><text x="93.4535%" y="143.50"></text></g><g><title>`0x7FFFF9D06A1C (8,488 samples, 0.07%)</title><rect x="93.2467%" y="133" width="0.0729%" height="15" fill="rgb(230,138,44)" fg:x="10863321" fg:w="8488"/><text x="93.4967%" y="143.50"></text></g><g><title>`0x7FFFF9D06A1F (14,866 samples, 0.13%)</title><rect x="93.3196%" y="133" width="0.1276%" height="15" fill="rgb(235,182,43)" fg:x="10871809" fg:w="14866"/><text x="93.5696%" y="143.50"></text></g><g><title>`0x7FFFF9D06A23 (20,143 samples, 0.17%)</title><rect x="93.4472%" y="133" width="0.1729%" height="15" fill="rgb(242,16,51)" fg:x="10886675" fg:w="20143"/><text x="93.6972%" y="143.50"></text></g><g><title>`0x7FFFF9D06A2A (2,310 samples, 0.02%)</title><rect x="93.6228%" y="133" width="0.0198%" height="15" fill="rgb(248,9,4)" fg:x="10907136" fg:w="2310"/><text x="93.8728%" y="143.50"></text></g><g><title>`0x7FFFF9D06A30 (3,953 samples, 0.03%)</title><rect x="93.6465%" y="133" width="0.0339%" height="15" fill="rgb(210,31,22)" fg:x="10909896" fg:w="3953"/><text x="93.8965%" y="143.50"></text></g><g><title>`0x7FFFF9D06A35 (3,761 samples, 0.03%)</title><rect x="93.6831%" y="133" width="0.0323%" height="15" fill="rgb(239,54,39)" fg:x="10914159" fg:w="3761"/><text x="93.9331%" y="143.50"></text></g><g><title>`0x7FFFF9D06A39 (9,887 samples, 0.08%)</title><rect x="93.7154%" y="133" width="0.0849%" height="15" fill="rgb(230,99,41)" fg:x="10917920" fg:w="9887"/><text x="93.9654%" y="143.50"></text></g><g><title>`0x7FFFF9D06A3F (5,938 samples, 0.05%)</title><rect x="93.8037%" y="133" width="0.0510%" height="15" fill="rgb(253,106,12)" fg:x="10928217" fg:w="5938"/><text x="94.0537%" y="143.50"></text></g><g><title>`0x7FFFF9D06A42 (3,969 samples, 0.03%)</title><rect x="93.8547%" y="133" width="0.0341%" height="15" fill="rgb(213,46,41)" fg:x="10934155" fg:w="3969"/><text x="94.1047%" y="143.50"></text></g><g><title>`0x7FFFF9D06A4B (5,413 samples, 0.05%)</title><rect x="93.8982%" y="133" width="0.0465%" height="15" fill="rgb(215,133,35)" fg:x="10939218" fg:w="5413"/><text x="94.1482%" y="143.50"></text></g><g><title>`0x7FFFF9D06A83 (4,604 samples, 0.04%)</title><rect x="93.9987%" y="133" width="0.0395%" height="15" fill="rgb(213,28,5)" fg:x="10950924" fg:w="4604"/><text x="94.2487%" y="143.50"></text></g><g><title>`0x7FFFF9D06A9C (1,537 samples, 0.01%)</title><rect x="94.0678%" y="133" width="0.0132%" height="15" fill="rgb(215,77,49)" fg:x="10958985" fg:w="1537"/><text x="94.3178%" y="143.50"></text></g><g><title>`0x7FFFF9D06AA1 (3,708 samples, 0.03%)</title><rect x="94.0863%" y="133" width="0.0318%" height="15" fill="rgb(248,100,22)" fg:x="10961130" fg:w="3708"/><text x="94.3363%" y="143.50"></text></g><g><title>`0x7FFFF9D06AB7 (131,052 samples, 1.12%)</title><rect x="94.1476%" y="133" width="1.1249%" height="15" fill="rgb(208,67,9)" fg:x="10968275" fg:w="131052"/><text x="94.3976%" y="143.50"></text></g><g><title>`0x7FFFF9D06AD2 (4,097 samples, 0.04%)</title><rect x="95.2764%" y="133" width="0.0352%" height="15" fill="rgb(219,133,21)" fg:x="11099785" fg:w="4097"/><text x="95.5264%" y="143.50"></text></g><g><title>`0x7FFFF9D06AE9 (1,604 samples, 0.01%)</title><rect x="95.3326%" y="133" width="0.0138%" height="15" fill="rgb(246,46,29)" fg:x="11106327" fg:w="1604"/><text x="95.5826%" y="143.50"></text></g><g><title>`0x7FFFF9D06AED (20,142 samples, 0.17%)</title><rect x="95.3463%" y="133" width="0.1729%" height="15" fill="rgb(246,185,52)" fg:x="11107931" fg:w="20142"/><text x="95.5963%" y="143.50"></text></g><g><title>`0x7FFFF9D06AF7 (5,918 samples, 0.05%)</title><rect x="95.5218%" y="133" width="0.0508%" height="15" fill="rgb(252,136,11)" fg:x="11128373" fg:w="5918"/><text x="95.7718%" y="143.50"></text></g><g><title>`0x7FFFF9D06B09 (1,249 samples, 0.01%)</title><rect x="95.5942%" y="133" width="0.0107%" height="15" fill="rgb(219,138,53)" fg:x="11136803" fg:w="1249"/><text x="95.8442%" y="143.50"></text></g><g><title>`0x7FFFF9D06B13 (2,473 samples, 0.02%)</title><rect x="95.6076%" y="133" width="0.0212%" height="15" fill="rgb(211,51,23)" fg:x="11138373" fg:w="2473"/><text x="95.8576%" y="143.50"></text></g><g><title>`0x7FFFF9D06B16 (3,353 samples, 0.03%)</title><rect x="95.6289%" y="133" width="0.0288%" height="15" fill="rgb(247,221,28)" fg:x="11140846" fg:w="3353"/><text x="95.8789%" y="143.50"></text></g><g><title>`0x7FFFF9D06B45 (3,038 samples, 0.03%)</title><rect x="95.6905%" y="133" width="0.0261%" height="15" fill="rgb(251,222,45)" fg:x="11148030" fg:w="3038"/><text x="95.9405%" y="143.50"></text></g><g><title>`0x7FFFF9D06B4D (3,180 samples, 0.03%)</title><rect x="95.7199%" y="133" width="0.0273%" height="15" fill="rgb(217,162,53)" fg:x="11151452" fg:w="3180"/><text x="95.9699%" y="143.50"></text></g><g><title>`0x7FFFF9D06B60 (2,065 samples, 0.02%)</title><rect x="95.7796%" y="133" width="0.0177%" height="15" fill="rgb(229,93,14)" fg:x="11158411" fg:w="2065"/><text x="96.0296%" y="143.50"></text></g><g><title>`0x7FFFF9D06B61 (5,594 samples, 0.05%)</title><rect x="95.7974%" y="133" width="0.0480%" height="15" fill="rgb(209,67,49)" fg:x="11160476" fg:w="5594"/><text x="96.0474%" y="143.50"></text></g><g><title>`0x7FFFF9D06DAC (1,592 samples, 0.01%)</title><rect x="95.8542%" y="133" width="0.0137%" height="15" fill="rgb(213,87,29)" fg:x="11167102" fg:w="1592"/><text x="96.1042%" y="143.50"></text></g><g><title>`0x7FFFF9D06DB5 (1,398 samples, 0.01%)</title><rect x="95.8788%" y="133" width="0.0120%" height="15" fill="rgb(205,151,52)" fg:x="11169964" fg:w="1398"/><text x="96.1288%" y="143.50"></text></g><g><title>`0x7FFFF9D06DBB (15,022 samples, 0.13%)</title><rect x="95.9008%" y="133" width="0.1289%" height="15" fill="rgb(253,215,39)" fg:x="11172526" fg:w="15022"/><text x="96.1508%" y="143.50"></text></g><g><title>`0x7FFFF9D06E7F (1,632 samples, 0.01%)</title><rect x="96.0331%" y="133" width="0.0140%" height="15" fill="rgb(221,220,41)" fg:x="11187933" fg:w="1632"/><text x="96.2831%" y="143.50"></text></g><g><title>Cherry-o.exe`_ZN3std3sys9backtrace28__rust_begin_short_backtrace17h509828a1779cab61E (11,188,070 samples, 96.03%)</title><rect x="0.0258%" y="165" width="96.0342%" height="15" fill="rgb(218,133,21)" fg:x="3003" fg:w="11188070"/><text x="0.2758%" y="175.50">Cherry-o.exe`_ZN3std3sys9backtrace28__rust_begin_short_backtrace17h509828a1779cab61E</text></g><g><title>Cherry-o.exe`_ZN8Cherry_o9gameParts14threaded_games17h77432824fc3ef2edE (11,188,070 samples, 96.03%)</title><rect x="0.0258%" y="149" width="96.0342%" height="15" fill="rgb(221,193,43)" fg:x="3003" fg:w="11188070"/><text x="0.2758%" y="159.50">Cherry-o.exe`_ZN8Cherry_o9gameParts14threaded_games17h77432824fc3ef2edE</text></g><g><title>Cherry-o.exe`Unknown (28,405 samples, 0.24%)</title><rect x="98.1772%" y="133" width="0.2438%" height="15" fill="rgb(240,128,52)" fg:x="11437730" fg:w="28405"/><text x="98.4272%" y="143.50"></text></g><g><title>Cherry-o.exe`_ZN11rand_chacha4guts11refill_wide17h027094cb12070ec9E (1,953 samples, 0.02%)</title><rect x="98.4269%" y="133" width="0.0168%" height="15" fill="rgb(253,114,12)" fg:x="11466824" fg:w="1953"/><text x="98.6769%" y="143.50"></text></g><g><title>Cherry-o.exe`_ZN4core4hash11BuildHasher8hash_one17h4aa6853e290ac4cdE (17,622 samples, 0.15%)</title><rect x="98.4437%" y="133" width="0.1513%" height="15" fill="rgb(215,223,47)" fg:x="11468777" fg:w="17622"/><text x="98.6937%" y="143.50"></text></g><g><title>Cherry-o.exe`_ZN71_$LT$std..hash..random..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17hb1ef85e5d76d96aaE.llvm.13714178557824273166 (6,054 samples, 0.05%)</title><rect x="98.5430%" y="117" width="0.0520%" height="15" fill="rgb(248,225,23)" fg:x="11480345" fg:w="6054"/><text x="98.7930%" y="127.50"></text></g><g><title>`0x7FFFF9CFC757 (1,552 samples, 0.01%)</title><rect x="98.6813%" y="69" width="0.0133%" height="15" fill="rgb(250,108,0)" fg:x="11496462" fg:w="1552"/><text x="98.9313%" y="79.50"></text></g><g><title>`0x7FFFF9CFBFC4 (6,971 samples, 0.06%)</title><rect x="98.6580%" y="85" width="0.0598%" height="15" fill="rgb(228,208,7)" fg:x="11493739" fg:w="6971"/><text x="98.9080%" y="95.50"></text></g><g><title>`0x7FFFF9CFBE86 (8,836 samples, 0.08%)</title><rect x="98.6458%" y="101" width="0.0758%" height="15" fill="rgb(244,45,10)" fg:x="11492323" fg:w="8836"/><text x="98.8958%" y="111.50"></text></g><g><title>`0x7FFFF9D0AB69 (1,409 samples, 0.01%)</title><rect x="98.7226%" y="69" width="0.0121%" height="15" fill="rgb(207,125,25)" fg:x="11501270" fg:w="1409"/><text x="98.9726%" y="79.50"></text></g><g><title>Cherry-o.exe`_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17h945a4cce548adf04E (15,838 samples, 0.14%)</title><rect x="98.5988%" y="133" width="0.1359%" height="15" fill="rgb(210,195,18)" fg:x="11486850" fg:w="15838"/><text x="98.8488%" y="143.50"></text></g><g><title>Cherry-o.exe`_ZN5alloc7raw_vec11finish_grow17h03e42e572fb602d5E.llvm.18167578724102939905 (13,794 samples, 0.12%)</title><rect x="98.6164%" y="117" width="0.1184%" height="15" fill="rgb(249,80,12)" fg:x="11488894" fg:w="13794"/><text x="98.8664%" y="127.50"></text></g><g><title>`0x7FFFF9D09A86 (1,419 samples, 0.01%)</title><rect x="98.7226%" y="101" width="0.0122%" height="15" fill="rgb(221,65,9)" fg:x="11501269" fg:w="1419"/><text x="98.9726%" y="111.50"></text></g><g><title>`0x7FFFF9D09BC5 (1,419 samples, 0.01%)</title><rect x="98.7226%" y="85" width="0.0122%" height="15" fill="rgb(235,49,36)" fg:x="11501269" fg:w="1419"/><text x="98.9726%" y="95.50"></text></g><g><title>Cherry-o.exe`_ZN72_$LT$rand..rngs..thread..ThreadRng$u20$as$u20$core..default..Default$GT$7default17hfe5a1cb34eeba825E (107,230 samples, 0.92%)</title><rect x="98.7348%" y="133" width="0.9204%" height="15" fill="rgb(225,32,20)" fg:x="11502688" fg:w="107230"/><text x="98.9848%" y="143.50"></text></g><g><title>Cherry-o.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (1,419 samples, 0.01%)</title><rect x="99.6672%" y="133" width="0.0122%" height="15" fill="rgb(215,141,46)" fg:x="11611317" fg:w="1419"/><text x="99.9172%" y="143.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::impl$0::dealloc (1,361 samples, 0.01%)</title><rect x="99.6677%" y="117" width="0.0117%" height="15" fill="rgb(250,160,47)" fg:x="11611375" fg:w="1361"/><text x="99.9177%" y="127.50"></text></g><g><title>Cherry-o.exe`std::sys::alloc::windows::process_heap_alloc (1,438 samples, 0.01%)</title><rect x="99.6794%" y="133" width="0.0123%" height="15" fill="rgb(216,222,40)" fg:x="11612736" fg:w="1438"/><text x="99.9294%" y="143.50"></text></g><g><title>`0x7FFFF9CFC757 (3,008 samples, 0.03%)</title><rect x="99.7757%" y="101" width="0.0258%" height="15" fill="rgb(234,217,39)" fg:x="11623957" fg:w="3008"/><text x="100.0257%" y="111.50"></text></g><g><title>`0x7FFFF9CFBFC4 (13,235 samples, 0.11%)</title><rect x="99.7321%" y="117" width="0.1136%" height="15" fill="rgb(207,178,40)" fg:x="11618880" fg:w="13235"/><text x="99.9821%" y="127.50"></text></g><g><title>`0x7FFFF9CFBE86 (16,683 samples, 0.14%)</title><rect x="99.7105%" y="133" width="0.1432%" height="15" fill="rgb(221,136,13)" fg:x="11616361" fg:w="16683"/><text x="99.9605%" y="143.50"></text></g><g><title>`0x7FFFF9D06AB7 (4,717 samples, 0.04%)</title><rect x="99.9296%" y="133" width="0.0405%" height="15" fill="rgb(249,199,10)" fg:x="11641882" fg:w="4717"/><text x="100.1796%" y="143.50"></text></g><g><title>Cherry-o.exe`alloc::boxed::impl$28::call_once (11,647,041 samples, 99.97%)</title><rect x="0.0258%" y="245" width="99.9739%" height="15" fill="rgb(249,222,13)" fg:x="3003" fg:w="11647041"/><text x="0.2758%" y="255.50">Cherry-o.exe`alloc::boxed::impl$28::call_once</text></g><g><title>Cherry-o.exe`alloc::boxed::impl$8::drop (11,647,041 samples, 99.97%)</title><rect x="0.0258%" y="229" width="99.9739%" height="15" fill="rgb(244,185,38)" fg:x="3003" fg:w="11647041"/><text x="0.2758%" y="239.50">Cherry-o.exe`alloc::boxed::impl$8::drop</text></g><g><title>Cherry-o.exe`core::alloc::layout::Layout::for_value_raw (11,647,041 samples, 99.97%)</title><rect x="0.0258%" y="213" width="99.9739%" height="15" fill="rgb(236,202,9)" fg:x="3003" fg:w="11647041"/><text x="0.2758%" y="223.50">Cherry-o.exe`core::alloc::layout::Layout::for_value_raw</text></g><g><title>Cherry-o.exe`core::mem::size_of_val_raw (11,647,041 samples, 99.97%)</title><rect x="0.0258%" y="197" width="99.9739%" height="15" fill="rgb(250,229,37)" fg:x="3003" fg:w="11647041"/><text x="0.2758%" y="207.50">Cherry-o.exe`core::mem::size_of_val_raw</text></g><g><title>Cherry-o.exe`Unknown (11,647,041 samples, 99.97%)</title><rect x="0.0258%" y="181" width="99.9739%" height="15" fill="rgb(206,174,23)" fg:x="3003" fg:w="11647041"/><text x="0.2758%" y="191.50">Cherry-o.exe`Unknown</text></g><g><title>Cherry-o.exe`_ZN3std3sys9backtrace28__rust_begin_short_backtrace17hb3df7166ad0d64cfE (458,970 samples, 3.94%)</title><rect x="96.0600%" y="165" width="3.9396%" height="15" fill="rgb(211,33,43)" fg:x="11191074" fg:w="458970"/><text x="96.3100%" y="175.50">Cher..</text></g><g><title>Cherry-o.exe`_ZN8Cherry_o9gameParts14threaded_games17h77432824fc3ef2edE (458,970 samples, 3.94%)</title><rect x="96.0600%" y="149" width="3.9396%" height="15" fill="rgb(245,58,50)" fg:x="11191074" fg:w="458970"/><text x="96.3100%" y="159.50">Cher..</text></g><g><title>Cherry-o.exe`std::sys::pal::windows::thread::impl$0::new::thread_start (11,647,042 samples, 99.97%)</title><rect x="0.0258%" y="277" width="99.9739%" height="15" fill="rgb(244,68,36)" fg:x="3003" fg:w="11647042"/><text x="0.2758%" y="287.50">Cherry-o.exe`std::sys::pal::windows::thread::impl$0::new::thread_start</text></g><g><title>Cherry-o.exe`alloc::boxed::impl$28::call_once (11,647,042 samples, 99.97%)</title><rect x="0.0258%" y="261" width="99.9739%" height="15" fill="rgb(232,229,15)" fg:x="3003" fg:w="11647042"/><text x="0.2758%" y="271.50">Cherry-o.exe`alloc::boxed::impl$28::call_once</text></g><g><title>`0x7FFFF8A7E8D7 (11,650,040 samples, 100.00%)</title><rect x="0.0001%" y="293" width="99.9996%" height="15" fill="rgb(254,30,23)" fg:x="14" fg:w="11650040"/><text x="0.2501%" y="303.50">`0x7FFFF8A7E8D7</text></g><g><title>`0x7FFFF9D9BF6C (11,650,042 samples, 100.00%)</title><rect x="0.0001%" y="309" width="99.9996%" height="15" fill="rgb(235,160,14)" fg:x="14" fg:w="11650042"/><text x="0.2501%" y="319.50">`0x7FFFF9D9BF6C</text></g><g><title>all (11,650,086 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="11650086"/><text x="0.2500%" y="335.50"></text></g></svg></svg>